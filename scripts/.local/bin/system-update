#!/bin/bash

# System Update Script
# Updates system packages, AUR packages, and development tools

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Icons
SUCCESS="‚úÖ"
ERROR="‚ùå"
INFO="‚ÑπÔ∏è"
ROCKET="üöÄ"
PACKAGE="üì¶"

echo -e "${CYAN}${ROCKET} Starting system update...${NC}\n"

# Function to print section headers
print_section() {
    echo -e "\n${BLUE}===================================================${NC}"
    echo -e "${BLUE} $1${NC}"
    echo -e "${BLUE}===================================================${NC}\n"
}

# Function to print status
print_status() {
    echo -e "${GREEN}${SUCCESS} $1${NC}"
}

print_error() {
    echo -e "${RED}${ERROR} $1${NC}"
}

print_info() {
    echo -e "${YELLOW}${INFO} $1${NC}"
}

# Update pacman keyring
print_section "Updating Pacman Keyring"
if sudo pacman-key --refresh-keys; then
    print_status "Pacman keyring updated"
else
    print_error "Failed to update pacman keyring"
fi

# Update mirror list
print_section "Updating Mirror List"
if command -v reflector &> /dev/null; then
    print_info "Updating mirrors with reflector..."
    sudo reflector --country 'United States' --latest 10 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
    print_status "Mirrors updated"
else
    print_info "Reflector not installed, skipping mirror update"
fi

# Update system packages
print_section "Updating System Packages"
if sudo pacman -Syu --noconfirm; then
    print_status "System packages updated"
else
    print_error "Failed to update system packages"
    exit 1
fi

# Update AUR packages
print_section "Updating AUR Packages"
if command -v yay &> /dev/null; then
    print_info "Updating AUR packages with yay..."
    yay -Sua --noconfirm
    print_status "AUR packages updated"
elif command -v paru &> /dev/null; then
    print_info "Updating AUR packages with paru..."
    paru -Sua --noconfirm
    print_status "AUR packages updated"
else
    print_info "No AUR helper found, skipping AUR updates"
fi

# Update Zinit and plugins
print_section "Updating Zsh Plugins"
if [ -d "$HOME/.local/share/zinit" ]; then
    print_info "Updating Zinit plugins..."
    zsh -c "source ~/.zshrc && zinit update --all"
    print_status "Zsh plugins updated"
else
    print_info "Zinit not found, skipping zsh plugin updates"
fi

# Update Neovim plugins
print_section "Updating Neovim Plugins"
if command -v nvim &> /dev/null; then
    print_info "Updating Neovim plugins..."
    nvim --headless "+Lazy! sync" +qa
    print_status "Neovim plugins updated"
else
    print_info "Neovim not found, skipping plugin updates"
fi

# Update Tmux plugins
print_section "Updating Tmux Plugins"
if [ -d "$HOME/.config/tmux/plugins/tpm" ]; then
    print_info "Updating Tmux plugins..."
    ~/.config/tmux/plugins/tpm/bin/update_plugins all
    print_status "Tmux plugins updated"
else
    print_info "TPM not found, skipping tmux plugin updates"
fi

# Update Node.js packages
print_section "Updating Node.js Packages"
if command -v npm &> /dev/null; then
    print_info "Updating global npm packages..."
    npm update -g
    print_status "Global npm packages updated"
else
    print_info "npm not found, skipping npm updates"
fi

# Update Rust packages
print_section "Updating Rust"
if command -v rustup &> /dev/null; then
    print_info "Updating Rust toolchain..."
    rustup update
    print_status "Rust toolchain updated"
else
    print_info "Rust not found, skipping rust updates"
fi

# Update Go packages
print_section "Updating Go"
if command -v go &> /dev/null; then
    print_info "Updating Go..."
    # Update Go tools if they exist
    if command -v gofumpt &> /dev/null; then
        go install mvdan.cc/gofumpt@latest
    fi
    if command -v golangci-lint &> /dev/null; then
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    fi
    print_status "Go tools updated"
else
    print_info "Go not found, skipping go updates"
fi

# Clean package cache
print_section "Cleaning Package Cache"
print_info "Cleaning pacman cache..."
sudo pacman -Sc --noconfirm
if command -v yay &> /dev/null; then
    print_info "Cleaning yay cache..."
    yay -Sc --noconfirm
fi
print_status "Package cache cleaned"

# Clean orphaned packages
print_section "Removing Orphaned Packages"
orphans=$(pacman -Qtdq 2>/dev/null)
if [ -n "$orphans" ]; then
    print_info "Removing orphaned packages..."
    sudo pacman -Rns $orphans --noconfirm
    print_status "Orphaned packages removed"
else
    print_info "No orphaned packages found"
fi

# Update file database
print_section "Updating File Database"
if command -v updatedb &> /dev/null; then
    print_info "Updating locate database..."
    sudo updatedb
    print_status "File database updated"
else
    print_info "locate not installed, skipping database update"
fi

# Summary
print_section "Update Summary"
echo -e "${GREEN}${SUCCESS} System update completed successfully!${NC}"
echo -e "${CYAN}${INFO} Summary:${NC}"
echo -e "  ‚Ä¢ System packages: Updated"
echo -e "  ‚Ä¢ AUR packages: Updated"
echo -e "  ‚Ä¢ Zsh plugins: Updated"
echo -e "  ‚Ä¢ Neovim plugins: Updated"
echo -e "  ‚Ä¢ Tmux plugins: Updated"
echo -e "  ‚Ä¢ Development tools: Updated"
echo -e "  ‚Ä¢ Package cache: Cleaned"
echo -e "  ‚Ä¢ Orphaned packages: Removed"

# Check if reboot is needed
if [ -f /var/run/reboot-required ]; then
    echo -e "\n${YELLOW}‚ö†Ô∏è  A reboot is required to complete the update${NC}"
fi

echo -e "\n${GREEN}${ROCKET} All done! Your system is up to date.${NC}"