#!/bin/bash

# New Project Setup Script
# Creates a new project with git, appropriate gitignore, and basic structure

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Icons
SUCCESS="‚úÖ"
ERROR="‚ùå"
INFO="‚ÑπÔ∏è"
ROCKET="üöÄ"
FOLDER="üìÅ"

# Default project directory
PROJECTS_DIR="$HOME/Projects"

# Function to print colored output
print_success() { echo -e "${GREEN}${SUCCESS} $1${NC}"; }
print_error() { echo -e "${RED}${ERROR} $1${NC}"; }
print_info() { echo -e "${CYAN}${INFO} $1${NC}"; }
print_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }

# Function to show usage
show_usage() {
    echo -e "${CYAN}${ROCKET} New Project Setup Script${NC}"
    echo ""
    echo "Usage: new-project <name> [type]"
    echo ""
    echo "Project types:"
    echo "  node      - Node.js/JavaScript project"
    echo "  react     - React application"
    echo "  vue       - Vue.js application"
    echo "  python    - Python project"
    echo "  django    - Django project"
    echo "  flask     - Flask project"
    echo "  go        - Go project"
    echo "  rust      - Rust project"
    echo "  cpp       - C++ project"
    echo "  general   - General project (default)"
    echo ""
    echo "Examples:"
    echo "  new-project my-app node"
    echo "  new-project todo-app react"
    echo "  new-project api-server go"
}

# Check arguments
if [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_usage
    exit 0
fi

PROJECT_NAME="$1"
PROJECT_TYPE="${2:-general}"
PROJECT_PATH="$PROJECTS_DIR/$PROJECT_NAME"

# Validate project name
if [[ ! "$PROJECT_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    print_error "Invalid project name. Use only letters, numbers, underscores, and hyphens."
    exit 1
fi

# Check if project already exists
if [ -d "$PROJECT_PATH" ]; then
    print_error "Project '$PROJECT_NAME' already exists at $PROJECT_PATH"
    exit 1
fi

print_info "Creating new $PROJECT_TYPE project: $PROJECT_NAME"

# Create project directory
mkdir -p "$PROJECT_PATH"
cd "$PROJECT_PATH"

print_success "Created project directory: $PROJECT_PATH"

# Initialize git repository
git init
print_success "Initialized git repository"

# Create basic README
cat > README.md << EOF
# $PROJECT_NAME

A $PROJECT_TYPE project.

## Getting Started

TODO: Add project description and setup instructions.

## Development

TODO: Add development instructions.

## License

TODO: Add license information.
EOF

print_success "Created README.md"

# Create project structure based on type
case "$PROJECT_TYPE" in
    "node")
        print_info "Setting up Node.js project..."
        npm init -y
        
        # Create basic structure
        mkdir -p src tests docs
        echo "console.log('Hello, World!');" > src/index.js
        
        # Create .gitignore
        cat > .gitignore << EOF
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
.nyc_output

# Grunt intermediate storage
.grunt

# Bower dependency directory
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons
build/Release

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.production

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory
coverage
.nyc_output

# Build outputs
dist/
build/

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db
EOF
        
        # Create basic package.json scripts
        npm pkg set scripts.start="node src/index.js"
        npm pkg set scripts.dev="nodemon src/index.js"
        npm pkg set scripts.test="echo \"Error: no test specified\" && exit 1"
        
        print_success "Node.js project setup complete"
        ;;
        
    "react")
        print_info "Setting up React project..."
        if command -v npm &> /dev/null; then
            npx create-react-app . --template typescript
        else
            print_error "npm not found. Please install Node.js first."
            exit 1
        fi
        print_success "React project setup complete"
        ;;
        
    "vue")
        print_info "Setting up Vue.js project..."
        if command -v npm &> /dev/null; then
            npm create vue@latest .
        else
            print_error "npm not found. Please install Node.js first."
            exit 1
        fi
        print_success "Vue.js project setup complete"
        ;;
        
    "python")
        print_info "Setting up Python project..."
        
        # Create virtual environment
        python3 -m venv venv
        
        # Create basic structure
        mkdir -p src tests docs
        touch src/__init__.py
        touch tests/__init__.py
        echo "print('Hello, World!')" > src/main.py
        
        # Create requirements files
        touch requirements.txt
        touch requirements-dev.txt
        
        # Create .gitignore
        cat > .gitignore << EOF
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Virtual environments
venv/
env/
ENV/
.venv/
.ENV/

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
EOF
        
        # Create basic setup.py
        cat > setup.py << EOF
from setuptools import setup, find_packages

setup(
    name="$PROJECT_NAME",
    version="0.1.0",
    packages=find_packages(where="src"),
    package_dir={"": "src"},
    python_requires=">=3.8",
    install_requires=[
        # Add your dependencies here
    ],
    author="Your Name",
    author_email="your.email@example.com",
    description="A short description of your project",
    long_description=open("README.md").read(),
    long_description_content_type="text/markdown",
    url="https://github.com/yourusername/$PROJECT_NAME",
    classifiers=[
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
    ],
)
EOF
        
        print_success "Python project setup complete"
        print_info "Activate virtual environment with: source venv/bin/activate"
        ;;
        
    "go")
        print_info "Setting up Go project..."
        
        if command -v go &> /dev/null; then
            go mod init "$PROJECT_NAME"
            
            # Create basic structure
            mkdir -p cmd pkg internal
            
            # Create main.go
            cat > cmd/main.go << EOF
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
}
EOF
            
            # Create .gitignore
            cat > .gitignore << EOF
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with \`go test -c\`
*.test

# Output of the go coverage tool
*.out

# Dependency directories
vendor/

# Go workspace file
go.work

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db
EOF
            
            print_success "Go project setup complete"
        else
            print_error "Go not found. Please install Go first."
            exit 1
        fi
        ;;
        
    "rust")
        print_info "Setting up Rust project..."
        
        if command -v cargo &> /dev/null; then
            cargo init --name "$PROJECT_NAME" .
            print_success "Rust project setup complete"
        else
            print_error "Cargo not found. Please install Rust first."
            exit 1
        fi
        ;;
        
    "cpp")
        print_info "Setting up C++ project..."
        
        # Create basic structure
        mkdir -p src include tests docs build
        
        # Create main.cpp
        cat > src/main.cpp << EOF
#include <iostream>

int main() {
    std::cout << "Hello, World!" << std::endl;
    return 0;
}
EOF
        
        # Create CMakeLists.txt
        cat > CMakeLists.txt << EOF
cmake_minimum_required(VERSION 3.16)
project($PROJECT_NAME)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include_directories(include)

add_executable(\${PROJECT_NAME} src/main.cpp)
EOF
        
        # Create .gitignore
        cat > .gitignore << EOF
# Prerequisites
*.d

# Compiled Object files
*.slo
*.lo
*.o
*.obj

# Precompiled Headers
*.gch
*.pch

# Compiled Dynamic libraries
*.so
*.dylib
*.dll

# Fortran module files
*.mod
*.smod

# Compiled Static libraries
*.lai
*.la
*.a
*.lib

# Executables
*.exe
*.out
*.app

# Build directories
build/
cmake-build-*/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
EOF
        
        print_success "C++ project setup complete"
        ;;
        
    *)
        print_info "Setting up general project..."
        
        # Create basic structure
        mkdir -p src docs
        
        # Create basic .gitignore
        cat > .gitignore << EOF
# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
*.log

# Temporary files
*.tmp
*.temp
*~

# Build artifacts
build/
dist/
*.o
*.a
*.so
*.exe
EOF
        
        print_success "General project setup complete"
        ;;
esac

# Add all files to git
git add .
git commit -m "Initial commit: $PROJECT_TYPE project setup"

print_success "Initial git commit created"

# Print summary
echo ""
echo -e "${CYAN}${ROCKET} Project created successfully!${NC}"
echo -e "${CYAN}${FOLDER} Location: $PROJECT_PATH${NC}"
echo ""
echo "Next steps:"
echo "1. cd $PROJECT_PATH"

case "$PROJECT_TYPE" in
    "python")
        echo "2. source venv/bin/activate"
        echo "3. pip install -r requirements.txt"
        ;;
    "node"|"react"|"vue")
        echo "2. npm install"
        echo "3. npm start"
        ;;
    "go")
        echo "2. go run cmd/main.go"
        ;;
    "rust")
        echo "2. cargo run"
        ;;
    "cpp")
        echo "2. mkdir build && cd build"
        echo "3. cmake .. && make"
        ;;
esac

echo ""
print_success "Happy coding! üéâ"