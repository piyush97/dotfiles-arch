#!/bin/bash

# Development Environment Setup Script
# Sets up a development environment with common tools and languages

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Icons
SUCCESS="✅"
ERROR="❌"
INFO="ℹ️"
ROCKET="🚀"
PACKAGE="📦"
TOOL="🔧"

# Function to print colored output
print_success() { echo -e "${GREEN}${SUCCESS} $1${NC}"; }
print_error() { echo -e "${RED}${ERROR} $1${NC}"; }
print_info() { echo -e "${CYAN}${INFO} $1${NC}"; }
print_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
print_section() {
    echo -e "\n${BLUE}=====================================${NC}"
    echo -e "${BLUE} $1${NC}"
    echo -e "${BLUE}=====================================${NC}\n"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install package if not exists
install_if_missing() {
    if ! command_exists "$1"; then
        print_info "Installing $1..."
        if command_exists "pacman"; then
            sudo pacman -S --noconfirm "$2"
        elif command_exists "apt"; then
            sudo apt install -y "$2"
        elif command_exists "dnf"; then
            sudo dnf install -y "$2"
        else
            print_error "No supported package manager found"
            return 1
        fi
        print_success "$1 installed"
    else
        print_info "$1 is already installed"
    fi
}

# Function to install AUR package
install_aur_if_missing() {
    if ! command_exists "$1"; then
        print_info "Installing $1 from AUR..."
        if command_exists "yay"; then
            yay -S --noconfirm "$2"
        elif command_exists "paru"; then
            paru -S --noconfirm "$2"
        else
            print_warning "No AUR helper found. Please install $1 manually."
            return 1
        fi
        print_success "$1 installed from AUR"
    else
        print_info "$1 is already installed"
    fi
}

echo -e "${CYAN}${ROCKET} Development Environment Setup${NC}"
echo -e "${CYAN}Setting up a comprehensive development environment...${NC}\n"

# =====================================
# Core Development Tools
# =====================================

print_section "Core Development Tools"

install_if_missing "git" "git"
install_if_missing "curl" "curl"
install_if_missing "wget" "wget"
install_if_missing "unzip" "unzip"
install_if_missing "tree" "tree"
install_if_missing "htop" "htop"
install_if_missing "neofetch" "neofetch"
install_if_missing "base-devel" "base-devel"

# Enhanced CLI tools
print_section "Enhanced CLI Tools"

install_if_missing "bat" "bat"
install_if_missing "fd" "fd"
install_if_missing "rg" "ripgrep"
install_if_missing "fzf" "fzf"
install_if_missing "lsd" "lsd"
install_aur_if_missing "zoxide" "zoxide"
install_aur_if_missing "yazi" "yazi"
install_aur_if_missing "lazygit" "lazygit"

# =====================================
# Programming Languages
# =====================================

print_section "Programming Languages"

# Node.js via NVM
if [ ! -d "$HOME/.nvm" ]; then
    print_info "Installing Node Version Manager (NVM)..."
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    
    print_info "Installing latest Node.js LTS..."
    nvm install --lts
    nvm use --lts
    nvm alias default lts/*
    print_success "Node.js installed via NVM"
else
    print_info "NVM is already installed"
fi

# Python
install_if_missing "python3" "python"
install_if_missing "pip3" "python-pip"

if command_exists "pip3"; then
    print_info "Installing Python development tools..."
    pip3 install --user pipenv poetry black flake8 mypy pytest jupyter
    print_success "Python development tools installed"
fi

# Go
if ! command_exists "go"; then
    print_info "Installing Go..."
    if command_exists "pacman"; then
        sudo pacman -S --noconfirm go
    else
        # Download and install Go manually
        GO_VERSION="1.21.0"
        wget -q "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz"
        sudo rm -rf /usr/local/go
        sudo tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz"
        rm "go${GO_VERSION}.linux-amd64.tar.gz"
        
        # Add to PATH if not already there
        if ! grep -q "/usr/local/go/bin" ~/.bashrc; then
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
        fi
    fi
    print_success "Go installed"
else
    print_info "Go is already installed"
fi

# Rust
if ! command_exists "cargo"; then
    print_info "Installing Rust..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
    print_success "Rust installed"
else
    print_info "Rust is already installed"
fi

# =====================================
# Editors and IDEs
# =====================================

print_section "Editors and IDEs"

install_if_missing "nvim" "neovim"
install_if_missing "code" "code"

# VS Code extensions
if command_exists "code"; then
    print_info "Installing VS Code extensions..."
    
    extensions=(
        "ms-vscode.vscode-typescript-next"
        "bradlc.vscode-tailwindcss"
        "esbenp.prettier-vscode"
        "ms-python.python"
        "golang.go"
        "rust-lang.rust-analyzer"
        "ms-vscode.vscode-json"
        "redhat.vscode-yaml"
        "ms-azuretools.vscode-docker"
        "eamodio.gitlens"
        "GitHub.copilot"
        "ms-vsliveshare.vsliveshare"
        "PKief.material-icon-theme"
        "zhuangtongfa.material-theme"
        "formulahendry.auto-rename-tag"
        "christian-kohler.path-intellisense"
        "ms-vscode.vscode-eslint"
    )
    
    for ext in "${extensions[@]}"; do
        code --install-extension "$ext" --force
    done
    
    print_success "VS Code extensions installed"
fi

# =====================================
# Development Tools
# =====================================

print_section "Development Tools"

install_if_missing "docker" "docker"
install_if_missing "docker-compose" "docker-compose"

# Enable and start Docker service
if command_exists "systemctl" && command_exists "docker"; then
    sudo systemctl enable docker
    sudo usermod -aG docker "$USER"
    print_success "Docker service enabled and user added to docker group"
    print_warning "Please log out and back in for Docker group changes to take effect"
fi

# Database tools
install_if_missing "sqlite3" "sqlite"
install_if_missing "postgresql" "postgresql"

# =====================================
# Terminal and Shell
# =====================================

print_section "Terminal and Shell Enhancement"

install_if_missing "zsh" "zsh"
install_if_missing "tmux" "tmux"

# Change default shell to zsh
if [ "$SHELL" != "/usr/bin/zsh" ] && [ "$SHELL" != "/bin/zsh" ]; then
    print_info "Changing default shell to zsh..."
    chsh -s $(which zsh)
    print_success "Default shell changed to zsh"
    print_warning "Please log out and back in for shell change to take effect"
else
    print_info "Zsh is already the default shell"
fi

# Install Zinit (Zsh plugin manager)
if [ ! -d "$HOME/.local/share/zinit" ]; then
    print_info "Installing Zinit (Zsh plugin manager)..."
    bash -c "$(curl --fail --show-error --silent --location https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh)"
    print_success "Zinit installed"
else
    print_info "Zinit is already installed"
fi

# =====================================
# Fonts
# =====================================

print_section "Installing Development Fonts"

FONTS_DIR="$HOME/.local/share/fonts"
mkdir -p "$FONTS_DIR"

# Download and install JetBrains Mono Nerd Font
if [ ! -f "$FONTS_DIR/JetBrainsMonoNerdFont-Regular.ttf" ]; then
    print_info "Installing JetBrains Mono Nerd Font..."
    
    FONT_URL="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip"
    TEMP_DIR=$(mktemp -d)
    
    wget -q "$FONT_URL" -O "$TEMP_DIR/JetBrainsMono.zip"
    unzip -q "$TEMP_DIR/JetBrainsMono.zip" -d "$TEMP_DIR"
    cp "$TEMP_DIR"/*.ttf "$FONTS_DIR/"
    
    # Update font cache
    fc-cache -fv
    
    rm -rf "$TEMP_DIR"
    print_success "JetBrains Mono Nerd Font installed"
else
    print_info "JetBrains Mono Nerd Font is already installed"
fi

# =====================================
# Development Utilities
# =====================================

print_section "Additional Development Utilities"

# Install GitHub CLI
if ! command_exists "gh"; then
    print_info "Installing GitHub CLI..."
    if command_exists "pacman"; then
        sudo pacman -S --noconfirm github-cli
    else
        # Install via their script
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh
    fi
    print_success "GitHub CLI installed"
else
    print_info "GitHub CLI is already installed"
fi

# Install useful global npm packages
if command_exists "npm"; then
    print_info "Installing global npm packages..."
    
    npm_packages=(
        "typescript"
        "ts-node"
        "@types/node"
        "eslint"
        "prettier"
        "nodemon"
        "http-server"
        "live-server"
        "json-server"
        "create-react-app"
        "@vue/cli"
        "vercel"
        "netlify-cli"
    )
    
    for pkg in "${npm_packages[@]}"; do
        npm install -g "$pkg" --silent
    done
    
    print_success "Global npm packages installed"
fi

# Install useful cargo packages
if command_exists "cargo"; then
    print_info "Installing useful Rust tools..."
    
    cargo_packages=(
        "tokei"         # Code statistics
        "hyperfine"     # Benchmarking
        "du-dust"       # Better du
        "procs"         # Better ps
        "bandwhich"     # Network usage
        "starship"      # Cross-shell prompt
    )
    
    for pkg in "${cargo_packages[@]}"; do
        cargo install "$pkg" --quiet
    done
    
    print_success "Rust development tools installed"
fi

# =====================================
# Configuration
# =====================================

print_section "Setting up configurations"

# Create development directories
mkdir -p "$HOME/Projects"
mkdir -p "$HOME/Scripts"
mkdir -p "$HOME/.config"

print_success "Development directories created"

# Set up Git configuration template
if ! git config --global user.name >/dev/null 2>&1; then
    print_info "Setting up Git configuration..."
    echo "Please enter your Git configuration details:"
    read -p "Full Name: " git_name
    read -p "Email: " git_email
    
    git config --global user.name "$git_name"
    git config --global user.email "$git_email"
    git config --global init.defaultBranch main
    git config --global pull.rebase true
    git config --global core.editor nvim
    
    print_success "Git configuration completed"
else
    print_info "Git is already configured"
fi

# =====================================
# Summary
# =====================================

print_section "Installation Summary"

echo -e "${GREEN}${SUCCESS} Development environment setup completed!${NC}"
echo ""
echo "Installed tools:"
echo "• Languages: Node.js (via NVM), Python, Go, Rust"
echo "• Editors: Neovim, VS Code (with extensions)"
echo "• CLI Tools: bat, fd, ripgrep, fzf, lsd, zoxide, yazi, lazygit"
echo "• Development: Docker, Git, GitHub CLI, tmux"
echo "• Shell: Zsh with Zinit plugin manager"
echo "• Fonts: JetBrains Mono Nerd Font"
echo ""
echo "Next steps:"
echo "1. Log out and back in for group/shell changes to take effect"
echo "2. Run 'source ~/.zshrc' to load the enhanced shell configuration"
echo "3. Configure your terminal to use JetBrains Mono Nerd Font"
echo "4. Set up your dotfiles configuration"
echo ""
print_success "Happy coding! 🚀"